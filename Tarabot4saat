import aiohttp
import asyncio
import pandas as pd
import numpy as np
from typing import List, Tuple

BASE_URLS = ["https://api.binance.com"]

# ===============================
# --- Göstergeler ---
# ===============================
def wilder_rsi(series: pd.Series, period: int = 14) -> pd.Series:
    delta = series.diff()
    gain = np.where(delta > 0, delta, 0)
    loss = np.where(delta < 0, -delta, 0)

    gain = pd.Series(gain, index=series.index)
    loss = pd.Series(loss, index=series.index)

    avg_gain = gain.ewm(alpha=1/period, min_periods=period, adjust=False).mean()
    avg_loss = loss.ewm(alpha=1/period, min_periods=period, adjust=False).mean()

    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    return rsi

def bollinger_bands(series: pd.Series, period: int = 20, mult: float = 2.0):
    sma = series.rolling(window=period).mean()
    std = series.rolling(window=period).std()
    lower = sma - mult * std
    upper = sma + mult * std
    return lower, sma, upper

# ===============================
# --- Binance API Fonksiyonları ---
# ===============================
async def fetch(session: aiohttp.ClientSession, url: str, params=None) -> dict:
    async with session.get(url, params=params, timeout=10) as resp:
        if resp.status != 200:
            raise Exception(f"HTTP {resp.status}")
        return await resp.json()

async def try_bases(path: str, params=None, bases: List[str] = None, session=None):
    bases = bases or BASE_URLS
    for base in bases:
        url = base + path
        try:
            return await fetch(session, url, params)
        except Exception:
            continue
    return None

async def get_symbols(session, bases=None) -> List[str]:
    data = await try_bases("/api/v3/exchangeInfo", bases=bases, session=session)
    if not data or "symbols" not in data:
        return []
    return [s["symbol"] for s in data["symbols"] if s["quoteAsset"] == "USDT" and s["status"] == "TRADING"]

async def get_klines(symbol: str, session, limit: int = 80, bases=None) -> pd.DataFrame:
    params = {"symbol": symbol, "interval": "4h", "limit": limit}  # 4 saatlik mum
    raw = await try_bases("/api/v3/klines", params=params, bases=bases, session=session)
    cols = ["openTime","open","high","low","close","volume","closeTime","quoteAssetVolume",
            "numberOfTrades","takerBuyBase","takerBuyQuote","ignore"]
    df = pd.DataFrame(raw, columns=cols)
    if df.empty:
        return df
    for c in ["open","high","low","close","volume","quoteAssetVolume","takerBuyBase","takerBuyQuote"]:
        df[c] = pd.to_numeric(df[c], errors="coerce")
    df["openTime"] = pd.to_datetime(df["openTime"], unit="ms", utc=True)
    df["closeTime"] = pd.to_datetime(df["closeTime"], unit="ms", utc=True)
    return df

# ===============================
# --- Koşul Kontrolü ---
# ===============================
def check_conditions(df: pd.DataFrame) -> Tuple[bool, float]:
    if df is None or len(df) < 25:
        return (False, float("nan"))

    # Son kapanmış mum (kapanmamış son mum yerine)
    i = len(df) - 2  

    close = df["close"]
    volume = df["volume"]

    rsi = wilder_rsi(close, 14)
    bb_lower, _, _ = bollinger_bands(close, 20, 2.0)

    last_close = close.iloc[i]
    last_rsi = rsi.iloc[i]
    last_bb_lower = bb_lower.iloc[i]

    # Hacim kontrolü
    if len(volume) < 4 or pd.isna(volume.iloc[i]):
        return (False, float(last_rsi) if not pd.isna(last_rsi) else float("nan"))

    prev3 = volume.iloc[i-3:i]
    if prev3.isna().any():
        return (False, float(last_rsi) if not pd.isna(last_rsi) else float("nan"))

    vol_ok = volume.iloc[i] > 1.8 * prev3.mean()
    cond_rsi = (not pd.isna(last_rsi)) and (last_rsi < 30.0)
    cond_bb  = (not pd.isna(last_bb_lower)) and (last_close < last_bb_lower)

    return (bool(cond_rsi and cond_bb and vol_ok),
            float(last_rsi) if not pd.isna(last_rsi) else float("nan"))

# ===============================
# --- Ana Tarama ---
# ===============================
async def scan():
    async with aiohttp.ClientSession() as session:
        symbols = await get_symbols(session, bases=BASE_URLS)
        results = []
        for sym in symbols:
            # İstenmeyen coinleri hariç tut
            if sym in ["KEYUSDT", "RENUSDT"]:
                continue
            df = await get_klines(sym, session, bases=BASE_URLS)
            if df is None or df.empty:
                continue
            cond, rsi_val = check_conditions(df)
            if cond:
                results.append((sym, rsi_val))
        return results

if __name__ == "__main__":
    signals = asyncio.run(scan())
    if signals:
        print("Sinyal veren coinler:")
        for sym, rsi in signals:
            print(f"{sym} | RSI={rsi:.2f}")
    else:
        print("Bu 4 saatte sinyal yok.")
